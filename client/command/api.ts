/* tslint:disable */
/* eslint-disable */
/**
 * born-api API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CollectionRequestDTO
 */
export interface CollectionRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof CollectionRequestDTO
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CollectionRequestDTO
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CollectionRequestDTO
     */
    'linesheet_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CollectionRequestDTO
     */
    'lookbook_name'?: string;
}
/**
 * 
 * @export
 * @interface CollectionWithProductsRequestDTO
 */
export interface CollectionWithProductsRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof CollectionWithProductsRequestDTO
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CollectionWithProductsRequestDTO
     */
    'description'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof CollectionWithProductsRequestDTO
     */
    'product_ids'?: Array<number>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const FileType = {
    Logo: 'LOGO',
    Banner: 'BANNER',
    Linesheet: 'LINESHEET',
    Lookbook: 'LOOKBOOK'
} as const;

export type FileType = typeof FileType[keyof typeof FileType];


/**
 * 
 * @export
 * @interface OrderDetailRequestDTO
 */
export interface OrderDetailRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof OrderDetailRequestDTO
     */
    'note'?: string;
    /**
     * 
     * @type {Array<OrderDetailSizeRequestDTO>}
     * @memberof OrderDetailRequestDTO
     */
    'order_detail_sizes'?: Array<OrderDetailSizeRequestDTO>;
}
/**
 * 
 * @export
 * @interface OrderDetailSizeRequestDTO
 */
export interface OrderDetailSizeRequestDTO {
    /**
     * 
     * @type {number}
     * @memberof OrderDetailSizeRequestDTO
     */
    'order_detail_size_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderDetailSizeRequestDTO
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface OrderRequestDTO
 */
export interface OrderRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof OrderRequestDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRequestDTO
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRequestDTO
     */
    'purchase_order'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRequestDTO
     */
    'retailer'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRequestDTO
     */
    'season'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRequestDTO
     */
    'buyer_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRequestDTO
     */
    'email_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRequestDTO
     */
    'billing_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRequestDTO
     */
    'delivery_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRequestDTO
     */
    'payment_terms'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderRequestDTO
     */
    'discount'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderRequestDTO
     */
    'surcharge'?: number;
    /**
     * 
     * @type {PricingCondition}
     * @memberof OrderRequestDTO
     */
    'pricing_condition'?: PricingCondition;
    /**
     * 
     * @type {string}
     * @memberof OrderRequestDTO
     */
    'size'?: string;
}


/**
 * 
 * @export
 * @interface OrderWithProductsRequestDTO
 */
export interface OrderWithProductsRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof OrderWithProductsRequestDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderWithProductsRequestDTO
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderWithProductsRequestDTO
     */
    'purchase_order'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderWithProductsRequestDTO
     */
    'retailer'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderWithProductsRequestDTO
     */
    'season'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderWithProductsRequestDTO
     */
    'buyer_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderWithProductsRequestDTO
     */
    'email_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderWithProductsRequestDTO
     */
    'billing_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderWithProductsRequestDTO
     */
    'delivery_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderWithProductsRequestDTO
     */
    'payment_terms'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderWithProductsRequestDTO
     */
    'discount'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderWithProductsRequestDTO
     */
    'surcharge'?: number;
    /**
     * 
     * @type {PricingCondition}
     * @memberof OrderWithProductsRequestDTO
     */
    'pricing_condition'?: PricingCondition;
    /**
     * 
     * @type {string}
     * @memberof OrderWithProductsRequestDTO
     */
    'size'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrderWithProductsRequestDTO
     */
    'productIds'?: Array<number>;
}


/**
 * 
 * @export
 * @interface OrganizationRequestDTO
 */
export interface OrganizationRequestDTO {
    /**
     * 
     * @type {OrganizationType}
     * @memberof OrganizationRequestDTO
     */
    'organization_type'?: OrganizationType;
    /**
     * 
     * @type {string}
     * @memberof OrganizationRequestDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationRequestDTO
     */
    'year_of_inception'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationRequestDTO
     */
    'country_of_origin'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationRequestDTO
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationRequestDTO
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationRequestDTO
     */
    'address'?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof OrganizationRequestDTO
     */
    'currency_types'?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof OrganizationRequestDTO
     */
    'instagram_link'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationRequestDTO
     */
    'website_link'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationRequestDTO
     */
    'terms_and_conditions'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationRequestDTO
     */
    'linesheet_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationRequestDTO
     */
    'lookbook_name'?: string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const OrganizationType = {
    Retailer: 'RETAILER',
    Brand: 'BRAND'
} as const;

export type OrganizationType = typeof OrganizationType[keyof typeof OrganizationType];


/**
 * 
 * @export
 * @enum {string}
 */

export const PricingCondition = {
    UsdLanded: 'USD_LANDED',
    UsdRetail: 'USD_RETAIL',
    UsdExworks: 'USD_EXWORKS',
    GbpLanded: 'GBP_LANDED',
    GbpRetail: 'GBP_RETAIL',
    GbpExworks: 'GBP_EXWORKS',
    EurLanded: 'EUR_LANDED',
    EurRetail: 'EUR_RETAIL',
    EurExworks: 'EUR_EXWORKS'
} as const;

export type PricingCondition = typeof PricingCondition[keyof typeof PricingCondition];


/**
 * 
 * @export
 * @enum {string}
 */

export const RoleType = {
    Owner: 'OWNER',
    Manager: 'MANAGER'
} as const;

export type RoleType = typeof RoleType[keyof typeof RoleType];


/**
 * 
 * @export
 * @interface UserOrganizationRequestDTO
 */
export interface UserOrganizationRequestDTO {
    /**
     * 
     * @type {RoleType}
     * @memberof UserOrganizationRequestDTO
     */
    'role_type': RoleType;
    /**
     * 
     * @type {UserRequestDTO}
     * @memberof UserOrganizationRequestDTO
     */
    'user_entity': UserRequestDTO;
    /**
     * 
     * @type {OrganizationRequestDTO}
     * @memberof UserOrganizationRequestDTO
     */
    'organization': OrganizationRequestDTO;
    /**
     * 
     * @type {string}
     * @memberof UserOrganizationRequestDTO
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserOrganizationRequestDTO
     */
    'createdBy'?: string;
}


/**
 * 
 * @export
 * @interface UserRequestDTO
 */
export interface UserRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof UserRequestDTO
     */
    'keycloak_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequestDTO
     */
    'keycloak_username': string;
    /**
     * 
     * @type {string}
     * @memberof UserRequestDTO
     */
    'keycloak_email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequestDTO
     */
    'keycloak_first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequestDTO
     */
    'keycloak_last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequestDTO
     */
    'birth_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequestDTO
     */
    'last_logged_in'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequestDTO
     */
    'password'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserRequestDTO
     */
    'product_notification_enabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserRequestDTO
     */
    'follow_notification_enabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserRequestDTO
     */
    'message_notification_enabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserRequestDTO
     */
    'order_notification_enabled'?: boolean;
}

/**
 * AttachmentResourceApi - axios parameter creator
 * @export
 */
export const AttachmentResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} fileName 
         * @param {FileType} fileType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttachmentDownloadCollectionAttachmentGet: async (fileName: string, fileType: FileType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('apiAttachmentDownloadCollectionAttachmentGet', 'fileName', fileName)
            // verify required parameter 'fileType' is not null or undefined
            assertParamExists('apiAttachmentDownloadCollectionAttachmentGet', 'fileType', fileType)
            const localVarPath = `/api/attachment/download-collection-attachment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (fileName !== undefined) {
                localVarQueryParameter['file_name'] = fileName;
            }

            if (fileType !== undefined) {
                localVarQueryParameter['file_type'] = fileType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fileName 
         * @param {FileType} fileType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttachmentDownloadOrganizationAttachmentGet: async (fileName: string, fileType: FileType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('apiAttachmentDownloadOrganizationAttachmentGet', 'fileName', fileName)
            // verify required parameter 'fileType' is not null or undefined
            assertParamExists('apiAttachmentDownloadOrganizationAttachmentGet', 'fileType', fileType)
            const localVarPath = `/api/attachment/download-organization-attachment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (fileName !== undefined) {
                localVarQueryParameter['file_name'] = fileName;
            }

            if (fileType !== undefined) {
                localVarQueryParameter['file_type'] = fileType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} collectionId 
         * @param {FileType} fileType 
         * @param {File} [file] 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttachmentUploadCollectionAttachmentPost: async (collectionId: number, fileType: FileType, file?: File, fileName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('apiAttachmentUploadCollectionAttachmentPost', 'collectionId', collectionId)
            // verify required parameter 'fileType' is not null or undefined
            assertParamExists('apiAttachmentUploadCollectionAttachmentPost', 'fileType', fileType)
            const localVarPath = `/api/attachment/upload-collection-attachment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (collectionId !== undefined) {
                localVarQueryParameter['collection_id'] = collectionId;
            }

            if (fileType !== undefined) {
                localVarQueryParameter['file_type'] = fileType;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileName !== undefined) { 
                localVarFormParams.append('fileName', fileName as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FileType} fileType 
         * @param {number} organizationId 
         * @param {File} [file] 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttachmentUploadOrganizationAttachmentPost: async (fileType: FileType, organizationId: number, file?: File, fileName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileType' is not null or undefined
            assertParamExists('apiAttachmentUploadOrganizationAttachmentPost', 'fileType', fileType)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiAttachmentUploadOrganizationAttachmentPost', 'organizationId', organizationId)
            const localVarPath = `/api/attachment/upload-organization-attachment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (fileType !== undefined) {
                localVarQueryParameter['file_type'] = fileType;
            }

            if (organizationId !== undefined) {
                localVarQueryParameter['organization_id'] = organizationId;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileName !== undefined) { 
                localVarFormParams.append('fileName', fileName as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttachmentResourceApi - functional programming interface
 * @export
 */
export const AttachmentResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttachmentResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} fileName 
         * @param {FileType} fileType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttachmentDownloadCollectionAttachmentGet(fileName: string, fileType: FileType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttachmentDownloadCollectionAttachmentGet(fileName, fileType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} fileName 
         * @param {FileType} fileType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttachmentDownloadOrganizationAttachmentGet(fileName: string, fileType: FileType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttachmentDownloadOrganizationAttachmentGet(fileName, fileType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} collectionId 
         * @param {FileType} fileType 
         * @param {File} [file] 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttachmentUploadCollectionAttachmentPost(collectionId: number, fileType: FileType, file?: File, fileName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttachmentUploadCollectionAttachmentPost(collectionId, fileType, file, fileName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FileType} fileType 
         * @param {number} organizationId 
         * @param {File} [file] 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttachmentUploadOrganizationAttachmentPost(fileType: FileType, organizationId: number, file?: File, fileName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttachmentUploadOrganizationAttachmentPost(fileType, organizationId, file, fileName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttachmentResourceApi - factory interface
 * @export
 */
export const AttachmentResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttachmentResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} fileName 
         * @param {FileType} fileType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttachmentDownloadCollectionAttachmentGet(fileName: string, fileType: FileType, options?: any): AxiosPromise<void> {
            return localVarFp.apiAttachmentDownloadCollectionAttachmentGet(fileName, fileType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} fileName 
         * @param {FileType} fileType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttachmentDownloadOrganizationAttachmentGet(fileName: string, fileType: FileType, options?: any): AxiosPromise<void> {
            return localVarFp.apiAttachmentDownloadOrganizationAttachmentGet(fileName, fileType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} collectionId 
         * @param {FileType} fileType 
         * @param {File} [file] 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttachmentUploadCollectionAttachmentPost(collectionId: number, fileType: FileType, file?: File, fileName?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAttachmentUploadCollectionAttachmentPost(collectionId, fileType, file, fileName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FileType} fileType 
         * @param {number} organizationId 
         * @param {File} [file] 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttachmentUploadOrganizationAttachmentPost(fileType: FileType, organizationId: number, file?: File, fileName?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAttachmentUploadOrganizationAttachmentPost(fileType, organizationId, file, fileName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttachmentResourceApi - object-oriented interface
 * @export
 * @class AttachmentResourceApi
 * @extends {BaseAPI}
 */
export class AttachmentResourceApi extends BaseAPI {
    /**
     * 
     * @param {string} fileName 
     * @param {FileType} fileType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentResourceApi
     */
    public apiAttachmentDownloadCollectionAttachmentGet(fileName: string, fileType: FileType, options?: AxiosRequestConfig) {
        return AttachmentResourceApiFp(this.configuration).apiAttachmentDownloadCollectionAttachmentGet(fileName, fileType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} fileName 
     * @param {FileType} fileType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentResourceApi
     */
    public apiAttachmentDownloadOrganizationAttachmentGet(fileName: string, fileType: FileType, options?: AxiosRequestConfig) {
        return AttachmentResourceApiFp(this.configuration).apiAttachmentDownloadOrganizationAttachmentGet(fileName, fileType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} collectionId 
     * @param {FileType} fileType 
     * @param {File} [file] 
     * @param {string} [fileName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentResourceApi
     */
    public apiAttachmentUploadCollectionAttachmentPost(collectionId: number, fileType: FileType, file?: File, fileName?: string, options?: AxiosRequestConfig) {
        return AttachmentResourceApiFp(this.configuration).apiAttachmentUploadCollectionAttachmentPost(collectionId, fileType, file, fileName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FileType} fileType 
     * @param {number} organizationId 
     * @param {File} [file] 
     * @param {string} [fileName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentResourceApi
     */
    public apiAttachmentUploadOrganizationAttachmentPost(fileType: FileType, organizationId: number, file?: File, fileName?: string, options?: AxiosRequestConfig) {
        return AttachmentResourceApiFp(this.configuration).apiAttachmentUploadOrganizationAttachmentPost(fileType, organizationId, file, fileName, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CollectionReportResourceApi - axios parameter creator
 * @export
 */
export const CollectionReportResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCollectionDownloadCollectionReportAsExcelGet: async (collectionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('apiCollectionDownloadCollectionReportAsExcelGet', 'collectionId', collectionId)
            const localVarPath = `/api/collection/download-collection-report-as-excel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (collectionId !== undefined) {
                localVarQueryParameter['collection_id'] = collectionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCollectionDownloadCollectionReportAsPdfGet: async (collectionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('apiCollectionDownloadCollectionReportAsPdfGet', 'collectionId', collectionId)
            const localVarPath = `/api/collection/download-collection-report-as-pdf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (collectionId !== undefined) {
                localVarQueryParameter['collection_id'] = collectionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CollectionReportResourceApi - functional programming interface
 * @export
 */
export const CollectionReportResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CollectionReportResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCollectionDownloadCollectionReportAsExcelGet(collectionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCollectionDownloadCollectionReportAsExcelGet(collectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCollectionDownloadCollectionReportAsPdfGet(collectionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCollectionDownloadCollectionReportAsPdfGet(collectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CollectionReportResourceApi - factory interface
 * @export
 */
export const CollectionReportResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CollectionReportResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCollectionDownloadCollectionReportAsExcelGet(collectionId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiCollectionDownloadCollectionReportAsExcelGet(collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCollectionDownloadCollectionReportAsPdfGet(collectionId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiCollectionDownloadCollectionReportAsPdfGet(collectionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CollectionReportResourceApi - object-oriented interface
 * @export
 * @class CollectionReportResourceApi
 * @extends {BaseAPI}
 */
export class CollectionReportResourceApi extends BaseAPI {
    /**
     * 
     * @param {number} collectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionReportResourceApi
     */
    public apiCollectionDownloadCollectionReportAsExcelGet(collectionId: number, options?: AxiosRequestConfig) {
        return CollectionReportResourceApiFp(this.configuration).apiCollectionDownloadCollectionReportAsExcelGet(collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} collectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionReportResourceApi
     */
    public apiCollectionDownloadCollectionReportAsPdfGet(collectionId: number, options?: AxiosRequestConfig) {
        return CollectionReportResourceApiFp(this.configuration).apiCollectionDownloadCollectionReportAsPdfGet(collectionId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CollectionResourceApi - axios parameter creator
 * @export
 */
export const CollectionResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} collectionId 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCollectionAssociateProductsPut: async (collectionId: number, requestBody?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('apiCollectionAssociateProductsPut', 'collectionId', collectionId)
            const localVarPath = `/api/collection/associate-products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (collectionId !== undefined) {
                localVarQueryParameter['collection_id'] = collectionId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} organizationId 
         * @param {CollectionWithProductsRequestDTO} [collectionWithProductsRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCollectionCreateNewCollectionPost: async (organizationId: number, collectionWithProductsRequestDTO?: CollectionWithProductsRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiCollectionCreateNewCollectionPost', 'organizationId', organizationId)
            const localVarPath = `/api/collection/create-new-collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (organizationId !== undefined) {
                localVarQueryParameter['organization_id'] = organizationId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionWithProductsRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} collectionId 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCollectionDisassociateProductsPut: async (collectionId: number, requestBody?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('apiCollectionDisassociateProductsPut', 'collectionId', collectionId)
            const localVarPath = `/api/collection/disassociate-products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (collectionId !== undefined) {
                localVarQueryParameter['collection_id'] = collectionId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} collectionId 
         * @param {CollectionRequestDTO} [collectionRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCollectionUpdateCollectionDetailsPut: async (collectionId: number, collectionRequestDTO?: CollectionRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('apiCollectionUpdateCollectionDetailsPut', 'collectionId', collectionId)
            const localVarPath = `/api/collection/update-collection-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (collectionId !== undefined) {
                localVarQueryParameter['collection_id'] = collectionId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CollectionResourceApi - functional programming interface
 * @export
 */
export const CollectionResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CollectionResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} collectionId 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCollectionAssociateProductsPut(collectionId: number, requestBody?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCollectionAssociateProductsPut(collectionId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} organizationId 
         * @param {CollectionWithProductsRequestDTO} [collectionWithProductsRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCollectionCreateNewCollectionPost(organizationId: number, collectionWithProductsRequestDTO?: CollectionWithProductsRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCollectionCreateNewCollectionPost(organizationId, collectionWithProductsRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} collectionId 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCollectionDisassociateProductsPut(collectionId: number, requestBody?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCollectionDisassociateProductsPut(collectionId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} collectionId 
         * @param {CollectionRequestDTO} [collectionRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCollectionUpdateCollectionDetailsPut(collectionId: number, collectionRequestDTO?: CollectionRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCollectionUpdateCollectionDetailsPut(collectionId, collectionRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CollectionResourceApi - factory interface
 * @export
 */
export const CollectionResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CollectionResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} collectionId 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCollectionAssociateProductsPut(collectionId: number, requestBody?: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.apiCollectionAssociateProductsPut(collectionId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} organizationId 
         * @param {CollectionWithProductsRequestDTO} [collectionWithProductsRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCollectionCreateNewCollectionPost(organizationId: number, collectionWithProductsRequestDTO?: CollectionWithProductsRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiCollectionCreateNewCollectionPost(organizationId, collectionWithProductsRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} collectionId 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCollectionDisassociateProductsPut(collectionId: number, requestBody?: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.apiCollectionDisassociateProductsPut(collectionId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} collectionId 
         * @param {CollectionRequestDTO} [collectionRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCollectionUpdateCollectionDetailsPut(collectionId: number, collectionRequestDTO?: CollectionRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiCollectionUpdateCollectionDetailsPut(collectionId, collectionRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CollectionResourceApi - object-oriented interface
 * @export
 * @class CollectionResourceApi
 * @extends {BaseAPI}
 */
export class CollectionResourceApi extends BaseAPI {
    /**
     * 
     * @param {number} collectionId 
     * @param {Array<number>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionResourceApi
     */
    public apiCollectionAssociateProductsPut(collectionId: number, requestBody?: Array<number>, options?: AxiosRequestConfig) {
        return CollectionResourceApiFp(this.configuration).apiCollectionAssociateProductsPut(collectionId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} organizationId 
     * @param {CollectionWithProductsRequestDTO} [collectionWithProductsRequestDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionResourceApi
     */
    public apiCollectionCreateNewCollectionPost(organizationId: number, collectionWithProductsRequestDTO?: CollectionWithProductsRequestDTO, options?: AxiosRequestConfig) {
        return CollectionResourceApiFp(this.configuration).apiCollectionCreateNewCollectionPost(organizationId, collectionWithProductsRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} collectionId 
     * @param {Array<number>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionResourceApi
     */
    public apiCollectionDisassociateProductsPut(collectionId: number, requestBody?: Array<number>, options?: AxiosRequestConfig) {
        return CollectionResourceApiFp(this.configuration).apiCollectionDisassociateProductsPut(collectionId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} collectionId 
     * @param {CollectionRequestDTO} [collectionRequestDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionResourceApi
     */
    public apiCollectionUpdateCollectionDetailsPut(collectionId: number, collectionRequestDTO?: CollectionRequestDTO, options?: AxiosRequestConfig) {
        return CollectionResourceApiFp(this.configuration).apiCollectionUpdateCollectionDetailsPut(collectionId, collectionRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FileIngestionResourceApi - axios parameter creator
 * @export
 */
export const FileIngestionResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} fileName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIngestionDownloadProductXlsGet: async (fileName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('apiIngestionDownloadProductXlsGet', 'fileName', fileName)
            const localVarPath = `/api/ingestion/download-product-xls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (fileName !== undefined) {
                localVarQueryParameter['file_name'] = fileName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} organizationId 
         * @param {File} [file] 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIngestionUploadAndImportProductXlsPost: async (organizationId: number, file?: File, fileName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiIngestionUploadAndImportProductXlsPost', 'organizationId', organizationId)
            const localVarPath = `/api/ingestion/upload-and-import-product-xls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (organizationId !== undefined) {
                localVarQueryParameter['organization_id'] = organizationId;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileName !== undefined) { 
                localVarFormParams.append('fileName', fileName as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileIngestionResourceApi - functional programming interface
 * @export
 */
export const FileIngestionResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileIngestionResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} fileName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIngestionDownloadProductXlsGet(fileName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIngestionDownloadProductXlsGet(fileName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} organizationId 
         * @param {File} [file] 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIngestionUploadAndImportProductXlsPost(organizationId: number, file?: File, fileName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIngestionUploadAndImportProductXlsPost(organizationId, file, fileName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileIngestionResourceApi - factory interface
 * @export
 */
export const FileIngestionResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileIngestionResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} fileName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIngestionDownloadProductXlsGet(fileName: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiIngestionDownloadProductXlsGet(fileName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} organizationId 
         * @param {File} [file] 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIngestionUploadAndImportProductXlsPost(organizationId: number, file?: File, fileName?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiIngestionUploadAndImportProductXlsPost(organizationId, file, fileName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileIngestionResourceApi - object-oriented interface
 * @export
 * @class FileIngestionResourceApi
 * @extends {BaseAPI}
 */
export class FileIngestionResourceApi extends BaseAPI {
    /**
     * 
     * @param {string} fileName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileIngestionResourceApi
     */
    public apiIngestionDownloadProductXlsGet(fileName: string, options?: AxiosRequestConfig) {
        return FileIngestionResourceApiFp(this.configuration).apiIngestionDownloadProductXlsGet(fileName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} organizationId 
     * @param {File} [file] 
     * @param {string} [fileName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileIngestionResourceApi
     */
    public apiIngestionUploadAndImportProductXlsPost(organizationId: number, file?: File, fileName?: string, options?: AxiosRequestConfig) {
        return FileIngestionResourceApiFp(this.configuration).apiIngestionUploadAndImportProductXlsPost(organizationId, file, fileName, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrderDetailResourceApi - axios parameter creator
 * @export
 */
export const OrderDetailResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} orderDetailId 
         * @param {number} orderId 
         * @param {OrderDetailRequestDTO} [orderDetailRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderUpdateDraftOrderDetailPut: async (orderDetailId: number, orderId: number, orderDetailRequestDTO?: OrderDetailRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderDetailId' is not null or undefined
            assertParamExists('apiOrderUpdateDraftOrderDetailPut', 'orderDetailId', orderDetailId)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiOrderUpdateDraftOrderDetailPut', 'orderId', orderId)
            const localVarPath = `/api/order/update-draft-order-detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (orderDetailId !== undefined) {
                localVarQueryParameter['order_detail_id'] = orderDetailId;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['order_id'] = orderId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderDetailRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderDetailResourceApi - functional programming interface
 * @export
 */
export const OrderDetailResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderDetailResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} orderDetailId 
         * @param {number} orderId 
         * @param {OrderDetailRequestDTO} [orderDetailRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderUpdateDraftOrderDetailPut(orderDetailId: number, orderId: number, orderDetailRequestDTO?: OrderDetailRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderUpdateDraftOrderDetailPut(orderDetailId, orderId, orderDetailRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderDetailResourceApi - factory interface
 * @export
 */
export const OrderDetailResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderDetailResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} orderDetailId 
         * @param {number} orderId 
         * @param {OrderDetailRequestDTO} [orderDetailRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderUpdateDraftOrderDetailPut(orderDetailId: number, orderId: number, orderDetailRequestDTO?: OrderDetailRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiOrderUpdateDraftOrderDetailPut(orderDetailId, orderId, orderDetailRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderDetailResourceApi - object-oriented interface
 * @export
 * @class OrderDetailResourceApi
 * @extends {BaseAPI}
 */
export class OrderDetailResourceApi extends BaseAPI {
    /**
     * 
     * @param {number} orderDetailId 
     * @param {number} orderId 
     * @param {OrderDetailRequestDTO} [orderDetailRequestDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderDetailResourceApi
     */
    public apiOrderUpdateDraftOrderDetailPut(orderDetailId: number, orderId: number, orderDetailRequestDTO?: OrderDetailRequestDTO, options?: AxiosRequestConfig) {
        return OrderDetailResourceApiFp(this.configuration).apiOrderUpdateDraftOrderDetailPut(orderDetailId, orderId, orderDetailRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrderReportResourceApi - axios parameter creator
 * @export
 */
export const OrderReportResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderDownloadOrderReportAsExcelGet: async (orderId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiOrderDownloadOrderReportAsExcelGet', 'orderId', orderId)
            const localVarPath = `/api/order/download-order-report-as-excel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (orderId !== undefined) {
                localVarQueryParameter['order_id'] = orderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderDownloadOrderReportAsPdfGet: async (orderId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiOrderDownloadOrderReportAsPdfGet', 'orderId', orderId)
            const localVarPath = `/api/order/download-order-report-as-pdf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (orderId !== undefined) {
                localVarQueryParameter['order_id'] = orderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderReportResourceApi - functional programming interface
 * @export
 */
export const OrderReportResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderReportResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderDownloadOrderReportAsExcelGet(orderId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderDownloadOrderReportAsExcelGet(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderDownloadOrderReportAsPdfGet(orderId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderDownloadOrderReportAsPdfGet(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderReportResourceApi - factory interface
 * @export
 */
export const OrderReportResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderReportResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderDownloadOrderReportAsExcelGet(orderId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiOrderDownloadOrderReportAsExcelGet(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderDownloadOrderReportAsPdfGet(orderId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiOrderDownloadOrderReportAsPdfGet(orderId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderReportResourceApi - object-oriented interface
 * @export
 * @class OrderReportResourceApi
 * @extends {BaseAPI}
 */
export class OrderReportResourceApi extends BaseAPI {
    /**
     * 
     * @param {number} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderReportResourceApi
     */
    public apiOrderDownloadOrderReportAsExcelGet(orderId: number, options?: AxiosRequestConfig) {
        return OrderReportResourceApiFp(this.configuration).apiOrderDownloadOrderReportAsExcelGet(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderReportResourceApi
     */
    public apiOrderDownloadOrderReportAsPdfGet(orderId: number, options?: AxiosRequestConfig) {
        return OrderReportResourceApiFp(this.configuration).apiOrderDownloadOrderReportAsPdfGet(orderId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrderResourceApi - axios parameter creator
 * @export
 */
export const OrderResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} orderId 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderAddProductsToDraftOrderPut: async (orderId: number, requestBody?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiOrderAddProductsToDraftOrderPut', 'orderId', orderId)
            const localVarPath = `/api/order/add-products-to-draft-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (orderId !== undefined) {
                localVarQueryParameter['order_id'] = orderId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderApproveOrderPut: async (orderId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiOrderApproveOrderPut', 'orderId', orderId)
            const localVarPath = `/api/order/approve-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (orderId !== undefined) {
                localVarQueryParameter['order_id'] = orderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderCancelOrderPut: async (orderId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiOrderCancelOrderPut', 'orderId', orderId)
            const localVarPath = `/api/order/cancel-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (orderId !== undefined) {
                localVarQueryParameter['order_id'] = orderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderConfirmOrderPut: async (orderId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiOrderConfirmOrderPut', 'orderId', orderId)
            const localVarPath = `/api/order/confirm-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (orderId !== undefined) {
                localVarQueryParameter['order_id'] = orderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} organizationId 
         * @param {OrderWithProductsRequestDTO} [orderWithProductsRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderCreateNewDraftOrderPost: async (organizationId: number, orderWithProductsRequestDTO?: OrderWithProductsRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiOrderCreateNewDraftOrderPost', 'organizationId', organizationId)
            const localVarPath = `/api/order/create-new-draft-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (organizationId !== undefined) {
                localVarQueryParameter['organization_id'] = organizationId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderWithProductsRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} orderId 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderRemoveProductsFromDraftOrderPut: async (orderId: number, requestBody?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiOrderRemoveProductsFromDraftOrderPut', 'orderId', orderId)
            const localVarPath = `/api/order/remove-products-from-draft-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (orderId !== undefined) {
                localVarQueryParameter['order_id'] = orderId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderRevertToDraftOrderPut: async (orderId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiOrderRevertToDraftOrderPut', 'orderId', orderId)
            const localVarPath = `/api/order/revert-to-draft-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (orderId !== undefined) {
                localVarQueryParameter['order_id'] = orderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} orderId 
         * @param {OrderRequestDTO} [orderRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderUpdateDraftOrderPut: async (orderId: number, orderRequestDTO?: OrderRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiOrderUpdateDraftOrderPut', 'orderId', orderId)
            const localVarPath = `/api/order/update-draft-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (orderId !== undefined) {
                localVarQueryParameter['order_id'] = orderId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderResourceApi - functional programming interface
 * @export
 */
export const OrderResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} orderId 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderAddProductsToDraftOrderPut(orderId: number, requestBody?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderAddProductsToDraftOrderPut(orderId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderApproveOrderPut(orderId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderApproveOrderPut(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderCancelOrderPut(orderId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderCancelOrderPut(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderConfirmOrderPut(orderId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderConfirmOrderPut(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} organizationId 
         * @param {OrderWithProductsRequestDTO} [orderWithProductsRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderCreateNewDraftOrderPost(organizationId: number, orderWithProductsRequestDTO?: OrderWithProductsRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderCreateNewDraftOrderPost(organizationId, orderWithProductsRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} orderId 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderRemoveProductsFromDraftOrderPut(orderId: number, requestBody?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderRemoveProductsFromDraftOrderPut(orderId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderRevertToDraftOrderPut(orderId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderRevertToDraftOrderPut(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} orderId 
         * @param {OrderRequestDTO} [orderRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderUpdateDraftOrderPut(orderId: number, orderRequestDTO?: OrderRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderUpdateDraftOrderPut(orderId, orderRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderResourceApi - factory interface
 * @export
 */
export const OrderResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} orderId 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderAddProductsToDraftOrderPut(orderId: number, requestBody?: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.apiOrderAddProductsToDraftOrderPut(orderId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderApproveOrderPut(orderId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiOrderApproveOrderPut(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderCancelOrderPut(orderId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiOrderCancelOrderPut(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderConfirmOrderPut(orderId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiOrderConfirmOrderPut(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} organizationId 
         * @param {OrderWithProductsRequestDTO} [orderWithProductsRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderCreateNewDraftOrderPost(organizationId: number, orderWithProductsRequestDTO?: OrderWithProductsRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiOrderCreateNewDraftOrderPost(organizationId, orderWithProductsRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} orderId 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderRemoveProductsFromDraftOrderPut(orderId: number, requestBody?: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.apiOrderRemoveProductsFromDraftOrderPut(orderId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderRevertToDraftOrderPut(orderId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiOrderRevertToDraftOrderPut(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} orderId 
         * @param {OrderRequestDTO} [orderRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderUpdateDraftOrderPut(orderId: number, orderRequestDTO?: OrderRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiOrderUpdateDraftOrderPut(orderId, orderRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderResourceApi - object-oriented interface
 * @export
 * @class OrderResourceApi
 * @extends {BaseAPI}
 */
export class OrderResourceApi extends BaseAPI {
    /**
     * 
     * @param {number} orderId 
     * @param {Array<number>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderResourceApi
     */
    public apiOrderAddProductsToDraftOrderPut(orderId: number, requestBody?: Array<number>, options?: AxiosRequestConfig) {
        return OrderResourceApiFp(this.configuration).apiOrderAddProductsToDraftOrderPut(orderId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderResourceApi
     */
    public apiOrderApproveOrderPut(orderId: number, options?: AxiosRequestConfig) {
        return OrderResourceApiFp(this.configuration).apiOrderApproveOrderPut(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderResourceApi
     */
    public apiOrderCancelOrderPut(orderId: number, options?: AxiosRequestConfig) {
        return OrderResourceApiFp(this.configuration).apiOrderCancelOrderPut(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderResourceApi
     */
    public apiOrderConfirmOrderPut(orderId: number, options?: AxiosRequestConfig) {
        return OrderResourceApiFp(this.configuration).apiOrderConfirmOrderPut(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} organizationId 
     * @param {OrderWithProductsRequestDTO} [orderWithProductsRequestDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderResourceApi
     */
    public apiOrderCreateNewDraftOrderPost(organizationId: number, orderWithProductsRequestDTO?: OrderWithProductsRequestDTO, options?: AxiosRequestConfig) {
        return OrderResourceApiFp(this.configuration).apiOrderCreateNewDraftOrderPost(organizationId, orderWithProductsRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} orderId 
     * @param {Array<number>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderResourceApi
     */
    public apiOrderRemoveProductsFromDraftOrderPut(orderId: number, requestBody?: Array<number>, options?: AxiosRequestConfig) {
        return OrderResourceApiFp(this.configuration).apiOrderRemoveProductsFromDraftOrderPut(orderId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderResourceApi
     */
    public apiOrderRevertToDraftOrderPut(orderId: number, options?: AxiosRequestConfig) {
        return OrderResourceApiFp(this.configuration).apiOrderRevertToDraftOrderPut(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} orderId 
     * @param {OrderRequestDTO} [orderRequestDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderResourceApi
     */
    public apiOrderUpdateDraftOrderPut(orderId: number, orderRequestDTO?: OrderRequestDTO, options?: AxiosRequestConfig) {
        return OrderResourceApiFp(this.configuration).apiOrderUpdateDraftOrderPut(orderId, orderRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrganizationResourceApi - axios parameter creator
 * @export
 */
export const OrganizationResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} organizationId 
         * @param {OrganizationRequestDTO} [organizationRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrganizationUpdateOrganizationDetailsPut: async (organizationId: number, organizationRequestDTO?: OrganizationRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiOrganizationUpdateOrganizationDetailsPut', 'organizationId', organizationId)
            const localVarPath = `/api/organization/update-organization-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (organizationId !== undefined) {
                localVarQueryParameter['organization_id'] = organizationId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizationRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationResourceApi - functional programming interface
 * @export
 */
export const OrganizationResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} organizationId 
         * @param {OrganizationRequestDTO} [organizationRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrganizationUpdateOrganizationDetailsPut(organizationId: number, organizationRequestDTO?: OrganizationRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrganizationUpdateOrganizationDetailsPut(organizationId, organizationRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationResourceApi - factory interface
 * @export
 */
export const OrganizationResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} organizationId 
         * @param {OrganizationRequestDTO} [organizationRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrganizationUpdateOrganizationDetailsPut(organizationId: number, organizationRequestDTO?: OrganizationRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiOrganizationUpdateOrganizationDetailsPut(organizationId, organizationRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationResourceApi - object-oriented interface
 * @export
 * @class OrganizationResourceApi
 * @extends {BaseAPI}
 */
export class OrganizationResourceApi extends BaseAPI {
    /**
     * 
     * @param {number} organizationId 
     * @param {OrganizationRequestDTO} [organizationRequestDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationResourceApi
     */
    public apiOrganizationUpdateOrganizationDetailsPut(organizationId: number, organizationRequestDTO?: OrganizationRequestDTO, options?: AxiosRequestConfig) {
        return OrganizationResourceApiFp(this.configuration).apiOrganizationUpdateOrganizationDetailsPut(organizationId, organizationRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductResourceApi - axios parameter creator
 * @export
 */
export const ProductResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductDeleteProductsDelete: async (requestBody?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/product/delete-products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductResourceApi - functional programming interface
 * @export
 */
export const ProductResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDeleteProductsDelete(requestBody?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductDeleteProductsDelete(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductResourceApi - factory interface
 * @export
 */
export const ProductResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductDeleteProductsDelete(requestBody?: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.apiProductDeleteProductsDelete(requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductResourceApi - object-oriented interface
 * @export
 * @class ProductResourceApi
 * @extends {BaseAPI}
 */
export class ProductResourceApi extends BaseAPI {
    /**
     * 
     * @param {Array<number>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductResourceApi
     */
    public apiProductDeleteProductsDelete(requestBody?: Array<number>, options?: AxiosRequestConfig) {
        return ProductResourceApiFp(this.configuration).apiProductDeleteProductsDelete(requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RegistrationResourceApi - axios parameter creator
 * @export
 */
export const RegistrationResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserOrganizationRequestDTO} [userOrganizationRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRegisterPost: async (userOrganizationRequestDTO?: UserOrganizationRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userOrganizationRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegistrationResourceApi - functional programming interface
 * @export
 */
export const RegistrationResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegistrationResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserOrganizationRequestDTO} [userOrganizationRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserRegisterPost(userOrganizationRequestDTO?: UserOrganizationRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserRegisterPost(userOrganizationRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RegistrationResourceApi - factory interface
 * @export
 */
export const RegistrationResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegistrationResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {UserOrganizationRequestDTO} [userOrganizationRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRegisterPost(userOrganizationRequestDTO?: UserOrganizationRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiUserRegisterPost(userOrganizationRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegistrationResourceApi - object-oriented interface
 * @export
 * @class RegistrationResourceApi
 * @extends {BaseAPI}
 */
export class RegistrationResourceApi extends BaseAPI {
    /**
     * 
     * @param {UserOrganizationRequestDTO} [userOrganizationRequestDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationResourceApi
     */
    public apiUserRegisterPost(userOrganizationRequestDTO?: UserOrganizationRequestDTO, options?: AxiosRequestConfig) {
        return RegistrationResourceApiFp(this.configuration).apiUserRegisterPost(userOrganizationRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserOrganizationResourceApi - axios parameter creator
 * @export
 */
export const UserOrganizationResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} organizationId 
         * @param {RoleType} roleType 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserOrganizationAddUserToOrganizationPut: async (organizationId: number, roleType: RoleType, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiUserOrganizationAddUserToOrganizationPut', 'organizationId', organizationId)
            // verify required parameter 'roleType' is not null or undefined
            assertParamExists('apiUserOrganizationAddUserToOrganizationPut', 'roleType', roleType)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiUserOrganizationAddUserToOrganizationPut', 'userId', userId)
            const localVarPath = `/api/user-organization/add-user-to-organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (organizationId !== undefined) {
                localVarQueryParameter['organization_id'] = organizationId;
            }

            if (roleType !== undefined) {
                localVarQueryParameter['role_type'] = roleType;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} organizationId 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserOrganizationRemoveUserFromOrganizationPut: async (organizationId: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiUserOrganizationRemoveUserFromOrganizationPut', 'organizationId', organizationId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiUserOrganizationRemoveUserFromOrganizationPut', 'userId', userId)
            const localVarPath = `/api/user-organization/remove-user-from-organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (organizationId !== undefined) {
                localVarQueryParameter['organization_id'] = organizationId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} organizationId 
         * @param {RoleType} roleType 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserOrganizationUpdateOrganizationRolePut: async (organizationId: number, roleType: RoleType, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiUserOrganizationUpdateOrganizationRolePut', 'organizationId', organizationId)
            // verify required parameter 'roleType' is not null or undefined
            assertParamExists('apiUserOrganizationUpdateOrganizationRolePut', 'roleType', roleType)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiUserOrganizationUpdateOrganizationRolePut', 'userId', userId)
            const localVarPath = `/api/user-organization/update-organization-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)

            if (organizationId !== undefined) {
                localVarQueryParameter['organization_id'] = organizationId;
            }

            if (roleType !== undefined) {
                localVarQueryParameter['role_type'] = roleType;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserOrganizationResourceApi - functional programming interface
 * @export
 */
export const UserOrganizationResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserOrganizationResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} organizationId 
         * @param {RoleType} roleType 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserOrganizationAddUserToOrganizationPut(organizationId: number, roleType: RoleType, userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserOrganizationAddUserToOrganizationPut(organizationId, roleType, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} organizationId 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserOrganizationRemoveUserFromOrganizationPut(organizationId: number, userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserOrganizationRemoveUserFromOrganizationPut(organizationId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} organizationId 
         * @param {RoleType} roleType 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserOrganizationUpdateOrganizationRolePut(organizationId: number, roleType: RoleType, userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserOrganizationUpdateOrganizationRolePut(organizationId, roleType, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserOrganizationResourceApi - factory interface
 * @export
 */
export const UserOrganizationResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserOrganizationResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} organizationId 
         * @param {RoleType} roleType 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserOrganizationAddUserToOrganizationPut(organizationId: number, roleType: RoleType, userId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiUserOrganizationAddUserToOrganizationPut(organizationId, roleType, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} organizationId 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserOrganizationRemoveUserFromOrganizationPut(organizationId: number, userId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiUserOrganizationRemoveUserFromOrganizationPut(organizationId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} organizationId 
         * @param {RoleType} roleType 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserOrganizationUpdateOrganizationRolePut(organizationId: number, roleType: RoleType, userId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiUserOrganizationUpdateOrganizationRolePut(organizationId, roleType, userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserOrganizationResourceApi - object-oriented interface
 * @export
 * @class UserOrganizationResourceApi
 * @extends {BaseAPI}
 */
export class UserOrganizationResourceApi extends BaseAPI {
    /**
     * 
     * @param {number} organizationId 
     * @param {RoleType} roleType 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserOrganizationResourceApi
     */
    public apiUserOrganizationAddUserToOrganizationPut(organizationId: number, roleType: RoleType, userId: number, options?: AxiosRequestConfig) {
        return UserOrganizationResourceApiFp(this.configuration).apiUserOrganizationAddUserToOrganizationPut(organizationId, roleType, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} organizationId 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserOrganizationResourceApi
     */
    public apiUserOrganizationRemoveUserFromOrganizationPut(organizationId: number, userId: number, options?: AxiosRequestConfig) {
        return UserOrganizationResourceApiFp(this.configuration).apiUserOrganizationRemoveUserFromOrganizationPut(organizationId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} organizationId 
     * @param {RoleType} roleType 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserOrganizationResourceApi
     */
    public apiUserOrganizationUpdateOrganizationRolePut(organizationId: number, roleType: RoleType, userId: number, options?: AxiosRequestConfig) {
        return UserOrganizationResourceApiFp(this.configuration).apiUserOrganizationUpdateOrganizationRolePut(organizationId, roleType, userId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserResourceApi - axios parameter creator
 * @export
 */
export const UserResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserRequestDTO} [userRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUpdateUserAndKcUserPut: async (userRequestDTO?: UserRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/update-user-and-kc-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keycloak-swagger-oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "keycloak-swagger-oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserResourceApi - functional programming interface
 * @export
 */
export const UserResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserRequestDTO} [userRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserUpdateUserAndKcUserPut(userRequestDTO?: UserRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserUpdateUserAndKcUserPut(userRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserResourceApi - factory interface
 * @export
 */
export const UserResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {UserRequestDTO} [userRequestDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUpdateUserAndKcUserPut(userRequestDTO?: UserRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiUserUpdateUserAndKcUserPut(userRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserResourceApi - object-oriented interface
 * @export
 * @class UserResourceApi
 * @extends {BaseAPI}
 */
export class UserResourceApi extends BaseAPI {
    /**
     * 
     * @param {UserRequestDTO} [userRequestDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public apiUserUpdateUserAndKcUserPut(userRequestDTO?: UserRequestDTO, options?: AxiosRequestConfig) {
        return UserResourceApiFp(this.configuration).apiUserUpdateUserAndKcUserPut(userRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


